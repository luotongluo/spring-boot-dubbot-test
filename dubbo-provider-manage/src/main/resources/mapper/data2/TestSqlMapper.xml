<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lt.dubboprovidermanage.test.data2.mapper.TestData2SqlMapper">

    <resultMap type="com.lt.dubboprovidermanage.entity.TestSql" id="TestSqlMap">
        <result property="id" column="id" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="userAge" column="user_age" jdbcType="INTEGER"/>
        <result property="userBirthday" column="user_birthday" jdbcType="TIMESTAMP"/>
        <result property="deleteInfo" column="delete_info" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="backup1" column="backup1" jdbcType="VARCHAR"/>
        <result property="backup2" column="backup2" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="TestSqlMap">
        select id,
               user_name,
               user_age,
               user_birthday,
               delete_info,
               create_time,
               update_time,
               backup1,
               backup2
        from  test_sql
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="TestSqlMap">
        select id,
               user_name,
               user_age,
               user_birthday,
               delete_info,
               create_time,
               update_time,
               backup1,
               backup2
        from  test_sql
                  limit #{offset}
           , #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="TestSqlMap">
        select
        id, user_name, user_age, user_birthday, delete_info, create_time, update_time, backup1, backup2
        from  test_sql
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="userName != null and userName != ''">
                and user_name = #{userName}
            </if>
            <if test="userAge != null">
                and user_age = #{userAge}
            </if>
            <if test="userBirthday != null">
                and user_birthday = #{userBirthday}
            </if>
            <if test="deleteInfo != null">
                and delete_info = #{deleteInfo}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="backup1 != null and backup1 != ''">
                and backup1 = #{backup1}
            </if>
            <if test="backup2 != null and backup2 != ''">
                and backup2 = #{backup2}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert">
        insert into  test_sql(id,user_name, user_age, user_birthday, delete_info, create_time, update_time,
                              backup1, backup2)
        values (#{id},#{userName}, #{userAge}, #{userBirthday}, #{deleteInfo}, #{createTime}, #{updateTime}, #{backup1}, #{backup2})
    </insert>

    <insert id="insertBatch">
        insert into  test_sql(id,user_name, user_age, user_birthday, delete_info, create_time, update_time,
        backup1, backup2)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id},#{entity.userName}, #{entity.userAge}, #{entity.userBirthday}, #{entity.deleteInfo}, #{entity.createTime},
            #{entity.updateTime}, #{entity.backup1}, #{entity.backup2})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch">
        insert into  test_sql(id,user_name, user_age, user_birthday, delete_info, create_time, update_time,
        backup1, backup2)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id},#{entity.userName}, #{entity.userAge}, #{entity.userBirthday}, #{entity.deleteInfo}, #{entity.createTime},
            #{entity.updateTime}, #{entity.backup1}, #{entity.backup2})
        </foreach>
        on duplicate key update
        user_name = values(user_name) , user_age = values(user_age) , user_birthday = values(user_birthday) ,
        delete_info = values(delete_info) , create_time = values(create_time) , update_time = values(update_time) ,
        backup1 = values(backup1) , backup2 = values(backup2)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update  test_sql
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userAge != null">
                user_age = #{userAge},
            </if>
            <if test="userBirthday != null">
                user_birthday = #{userBirthday},
            </if>
            <if test="deleteInfo != null">
                delete_info = #{deleteInfo},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="backup1 != null and backup1 != ''">
                backup1 = #{backup1},
            </if>
            <if test="backup2 != null and backup2 != ''">
                backup2 = #{backup2},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from  test_sql
        where id = #{id}
    </delete>

</mapper>

